<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: priority_queue | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/priority-queue/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2021-04-06T22:53:36-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[621. Task Scheduler with Gaps]]></title>
    <link href="http://fyou.me/blog/2019/03/17/task-scheduler-with-gaps/"/>
    <updated>2019-03-17T17:53:38-07:00</updated>
    <id>http://fyou.me/blog/2019/03/17/task-scheduler-with-gaps</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/task-scheduler/">https://leetcode.com/problems/task-scheduler/</a></p>

<p><a href="https://leetcode.com/problems/rearrange-string-k-distance-apart/">https://leetcode.com/problems/rearrange-string-k-distance-apart/</a></p>

<p>与一般的Scheduling问题不同，这题要求每个task之间最少间隔<code>x</code> gaps.</p>

<p>做法是priority_queue + greedy (未证明)，以&#8221;AAABBC&#8221;，x=3为例，greedy的过程大致为，从frequency最高的元素开始，依次填空</p>

<ol>
<li><code>A__A__A__</code></li>
<li><code>AB_AB_A__</code></li>
<li><code>ABCAB_A__</code> (注意trailing idle time是不需要的)</li>
</ol>


<p>所以最终的结果是<code>ABCAB_A</code>= <code>7</code></p>

<p>Implementation 复杂度为 <code>O(nlogn)</code> 应为每个元素都会被插入pq一次，这题有<code>O(n)</code>的<a href="https://leetcode.com/problems/task-scheduler/discuss/104500/Java-O(n">解法</a>-time-O(1)-space-1-pass-no-sorting-solution-with-detailed-explanation)</p>

<pre><code class="c++">class Solution {
public:
    int leastInterval(vector&lt;char&gt;&amp; tasks, int n) {
        unordered_map&lt;char, int&gt; taskCounts;
        priority_queue&lt;int&gt; taskQ;

        // O(t) count
        for (auto t : tasks) {
            ++taskCounts[t];
        }

        // O(tlogt) insert
        for (auto [t, freq]: taskCounts) {
            taskQ.push(freq);
        }

        int cycle = 0;
        while (!taskQ.empty()) {
            vector&lt;int&gt; remainingTasks;

            int idle = 0;
            int gaps = n;
            // note while (--i) and while (i--) executes different times
            // * while (--i) i-1 times
            // * while (i--) i   times
            while (gaps-- &gt;= 0) {
                if (!taskQ.empty()) {
                    remainingTasks.push_back(taskQ.top());
                    taskQ.pop(); 
                    ++cycle;
                } else {
                    ++idle;
                }
            }

            for (auto tf : remainingTasks) {
                if (--tf &gt; 0) {
                    taskQ.push(tf);
                }
            }

            if (!taskQ.empty()) {
                // to avoid trailing idle time
                cycle += idle;
            }
        }

        return cycle;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[774. Minimize Max Distance to Gas Station]]></title>
    <link href="http://fyou.me/blog/2018/05/09/minimize-max-distance-to-gas-station/"/>
    <updated>2018-05-09T22:25:00-07:00</updated>
    <id>http://fyou.me/blog/2018/05/09/minimize-max-distance-to-gas-station</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimize-max-distance-to-gas-station">https://leetcode.com/problems/minimize-max-distance-to-gas-station</a></p>

<p>题意为：给定一些坐标点，表示坐标轴上已有的gas station，同时给定K，表示将要再插入K个gas station，插完以后使gas station之间的最大距离最小。</p>

<p>首先要从离散的点抽象出Interval的概念，其实已有的gas station就是一个个Interval。更为关键的是，这些interval可以视为永远不变，唯一变化的就是他们里边可能插入多少个K。基于这些interval，我们每次选择插入K的时候，只要选择插入当前所有interval中dist最大的那个，一直插入直到它比第二大小为止。插完所有的K，我们就得到了最后的解。</p>

<p>有了以上的理解，一个priority_queue就可以轻易的解决问题，用addK()去update当前interval里的value，然后把update完的top重新插回priority_queue。解法复杂度为O(klogn)</p>

<pre><code class="c++">struct Interval {
    int length, k, dist;

    Interval(int i) : length(i), k(1), dist(i) {}

    bool operator&lt; (const Interval&amp; other) const {
        return dist &lt; other.dist;
    }

    void addK() {
        k++;
        dist = length/k;
    }
};

priority_queue&lt;Interval&gt; buildQueue(const vector&lt;int&gt;&amp; v) {
    vector&lt;int&gt; ret(v.size());
    adjacent_difference(v.begin(), v.end(), ret.begin());
    ret.erase(ret.begin());
    return priority_queue&lt;Interval&gt;(ret.begin(), ret.end());
}

int minMaxDist(const vector&lt;int&gt;&amp; v, int k) {
    auto pq = buildQueue(v);
    int maxDist = (v.back() - v.front())/(k+1); // just for optimization

    while(k) {
        Interval top = pq.top();
        pq.pop();

        while(pq.top() &lt; top || top.dist &gt; maxDist) {
            top.addK();
            k--;
        }
        pq.push(top);
    }

    return pq.top().dist;
}
</code></pre>

<p>这题的难点在于正确理解题意并抽象化后找出算法，关键点在于：</p>

<ul>
<li>由于最早给定的gas station，随着K的插入，变化的并不是interval，而是每个interval内部的dist。</li>
<li>只关注最后的最大距离，并不关心每个gas station插在了哪里。</li>
</ul>

]]></content>
  </entry>
  
</feed>
