<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stdlibc++ | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/stdlibc-plus-plus/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2021-04-06T23:24:17-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC 2015 小结]]></title>
    <link href="http://fyou.me/blog/2015/09/07/gsoc2015/"/>
    <updated>2015-09-07T00:02:53-04:00</updated>
    <id>http://fyou.me/blog/2015/09/07/gsoc2015</id>
    <content type="html"><![CDATA[<p>GSoC 2015 也算是结束了，期间学到了很多，也认识到了很多不足，拖延症患者拖到今天终于决定下笔记录下这一段经历，以便往后温习，吹逼之用。</p>

<h2>Extend shared_ptr to support arrays</h2>

<p>第一个Propose的项目是<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4335.html#memory.smartptr.shared">extend shared_ptr to support arrays</a>. 初始由于C＋＋技艺不精，甚至不知道shared_ptr是什么，所以先从shared_ptr的源码讲起吧。</p>

<h4>shared_ptr</h4>

<p>shared_ptr位于<code>libstdc++-v3/include/bits/shared_ptr.h</code>，这里的shared_ptr其实是对所有开放接口的一个封装，真正的实现在<code>shared_ptr_base.h</code>里。</p>

<p>找到__shared_ptr定义的private member，会发现只有两个东西</p>

<ol>
<li><em>Tp* </em>M_ptr;_                                                 // Contained Pointer</li>
<li>_<em>shared_count<_LP> </em>M_refcount;           // Reference counter</li>
</ol>


<p>shared_ptr的实现也就依赖这两个东西，一个raw pointer，另一个引用计数。有新的object使用raw pointer refcount++, 同样destructor调用一次refcount- -,如果refcount ＝＝ 0，那么就释放_M_ptr;</p>

<p>// 注（</p>

<p>一个裸指针被托管以后，任何想要使用这个指针的行为都得通过shared_ptr，否则UB</p>

<p>例如</p>

<pre><code class="c++">int* a = new int(5);
std::shared_ptr&lt;int&gt; sp(a);
// int* b = a;
// std::shared_ptr sb(b); undefined behavior
auto sb = sp; // refcount+1
</code></pre>

<p>）</p>

<p>说起来很简单，但是shared_ptr确实还是有不少坑。</p>

<h4>weak_ptr</h4>

<p>shared_ptr难免会出现这样的情况（cyclic reference），weak_ptr可以让持有执政却不增加引用计数。</p>

<pre><code class="c++">struct A {
  std::shared_ptr&lt;A&gt; ptr;
};

void main() {
  std::shared_ptr&lt;A&gt; x=std::make_shared&lt;A&gt;();
  std::shared_ptr&lt;A&gt; y=std::make_shared&lt;A&gt;();

  x-&gt;ptr = y; // not quite a cycle yet
  y-&gt;ptr = x; // now we got a cycle x keeps y alive and y keeps x alive
}
</code></pre>

<p>这样的情况，如果x 拿了一个指向y的weak_ptr就不存在这样的问题了。weak_ptr的用处很多，如<a href="http://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful">cache</a>。</p>

<h4>enable_shared_from_this</h4>

<p>参见我在知乎的<a href="http://zhihu.com/question/30957800/answer/50181754?utm_campaign=webshare&amp;utm_source=weibo&amp;utm_medium=zhihu">答案</a>。用于在类内部拿取自身的shared_ptr。</p>

<p>在每次构造一个<code>shared_ptr&lt;T&gt;</code>时都会检查T是否继承自enable_shared_from_this，如果是，会在自身的private member里保存一个weak_ptr，以后用shared_from_this()拿取自身的shared_ptr.</p>

<h4>support for arrays</h4>

<p>来到正题，shared_ptr虽然好用，但是对数组的支持并不好，也就是说，可以用但是基本没用。需要传入自己的destructor以保证资源正确释放。</p>

<pre><code class="c++">#include &lt;memory&gt;

 int main()
 {
   int array[3];
   std::shared_ptr&lt;int[3]&gt; p(&amp;array, [](int*p ){delete p;});
 }
</code></pre>

<p>为了将数组支持加入shared_ptr且保证之前使用shared_ptr的代码不出错，决定使用一个新的tag</p>

<pre><code class="c++">template &lt;typename _Tp&gt;
  struct __libfund_v1 { using type = _Tp; };
</code></pre>

<p>来和原本的__shared_ptr加以区分。</p>

<ol>
<li><p>做一个</p>

<pre><code class="c++">class __shared_ptr&lt;__libfund_v1&lt;T&gt;&gt;
:__shared_ptr&lt;typename remove_extent&lt;_Tp&gt;::type, _Lp&gt;{ }
</code></pre>

<p>//注（此处应做成private继承）</p></li>
<li><p>内部准备两个Deleter: _Array_Deleter 和 _Normal_Deleter。</p></li>
<li><p>根据T的类型选择使用Deleter</p>

<pre><code class="c++">using _Deleter_type
= typename conditional&lt;is_array&lt;_Tp&gt;::value,_Array_Deleter,_Normal_Deleter&gt;::type;
</code></pre></li>
<li><p>其他的情况只要pass到基类处理就好。</p></li>
</ol>


<p>整体的难度不是很大，但摸清gcc的coding style和这些代码的工作原理，着实费了番工夫。</p>

<p>当shared_ptr用在array时，其中有种情况跟原本不一样, 原本shared_ptr的构造函数可以接受能够进行implicit cast的类型。当放到数组是这一规则不再适用。</p>

<pre><code class="c++">class Base { };
class Derived : public Base { };

int main() {
  Base* b = new Derived(); // ok
  Base b_array[2];
  b_array = new Derived[2]; // if Base and Derived are of difference
                            // b_array[1] may cause trouble. "pointer arithmatic"
}
</code></pre>

<h4>技巧</h4>

<pre><code class="c++">// helper for _Compatible
template&lt;typename _From_type, typename _To_type&gt;
  struct __sp_compatible_helper
  { static constexpr bool value
    = is_convertible&lt;_From_type*, _To_type*&gt;::value; };

template&lt;size_t _Nm, typename _Tp&gt;
  struct __sp_compatible_helper&lt;_Tp[_Nm], _Tp[]&gt;
  { static constexpr bool value = true; };
</code></pre>

<p>C++中用偏特化做SFINAE的例子非常常见，是很好的技巧，要铭记。</p>

<h2>Polymorphic Allocator</h2>

<p>allocator这个概念应该还不是很常见，大多数时候这些都有stl内部进行管理，不用担心，但是有些时候，当用户想用自定义的allocator的时候，问题随之而来。</p>

<pre><code class="c++">std::vector&lt;A, alloc1&gt; vec1;
std::vector&lt;A, alloc2&gt; vec2;
// oops, vec1 and vec2 now have different types now, which should not happen.
</code></pre>

<p>Polymorphic Allocator 也就为了解决这个问题而生。</p>

<h4>Allocator</h4>

<p>一个完备的allocator需要具备一些<a href="http://en.cppreference.com/w/cpp/concept/Allocator">条件</a>，一个最简单的allocator可以仅仅是malloc和free的封装。</p>

<h4>memory_resource</h4>

<p>在Polymorphic Allocator的实现里，根据proposal引入了一个新的虚类<code>memory_resource</code>定义了三个virtual接口:</p>

<ol>
<li>do_allocate();</li>
<li>do_deallocate();</li>
<li>do_is_equal();</li>
</ol>


<h4>polymorphic_allocator</h4>

<pre><code class="c++">template &lt;class _Tp&gt;
  class polymorphic_allocator { }
</code></pre>

<p>这个class就是memory_resource的wrapper，给予了一个完备（前边提到）allocator的所有接口。这样让比如<code>list&lt;int, polymorphic_allocator&lt;int&gt;&gt;</code>虽然类型一样却使用可能了不同的allocator（在这里插一句，标准库容器std::vector之类比较于shared_ptr（多态）的实现，shared_ptr将allocator通过actor的方式传进来，不得不说是一种设计上的进步。）</p>

<p>这些接口主要负责两个功能：</p>

<ol>
<li>分配memory</li>
<li>构造对象</li>
</ol>


<p>polymorphic_allocator里存着个memory_resource*，负责真正进行allocator和deallocate，没有指定时默认为get_default_resource();</p>

<p>构造基于uses-allocator construction用::new(…);（placement new）进行构造。比较恶心的是pair 的piecewise construction，感兴趣的自行搜索，我是看都不想多看一眼。</p>

<h4>resource_adaptor</h4>

<pre><code class="c++">template &lt;typename _Alloc&gt;
  class __resource_adaptor_imp : public memory_resource { }

template &lt;typename _Alloc&gt;
  using resource_adaptor = __resource_adaptor_imp&lt;
    typename allocator_traits&lt;_Alloc&gt;::template rebind_alloc&lt;char&gt;&gt;;
</code></pre>

<p>这个class是对allocator的wrapper，把_Alloc包装成memory_resource，这样resource_adaptor&lt;X&lt;T>>和resource_adaptor&lt;X&lt;U>>就是一种类型了（都是memory_resource）。</p>

<p>所以通常可以这样，resource_adaptor包装allocator，送给polymorphic_allocator使用。</p>

<h4>Global Resource</h4>

<p>在写Global Resource的时候遇到了一个static和inline的<a href="http://stackoverflow.com/questions/185624/static-variables-in-an-inlined-function">问题</a>值得讨论：</p>

<p>在头文件中如果写了static function/variable，那么每个编译单元都会有一个自己的function造成浪费。所以一半生成global resource的方法是inline function返回static variable;</p>

<pre><code class="c++">inline std::atomic&lt;memory_resource*&gt;&amp;
__get_default_resource()
{
  static std::atomic&lt;memory_resource*&gt;
    _S_default_resource(new_delete_resource());
  return _S_default_resource;
}
</code></pre>

<p>补充一些关于static的知识：</p>

<pre><code class="c++">static int a; -&gt; static int a; //multiple copies
struct A { static int a; } int A::a = 3; -&gt; struct A {}; int A_a = 3;
</code></pre>

<p>第二种纯粹表示生命周期比较长（相当于有个只有自己能访问的全局变量。）</p>

<p>static in class == static in function;</p>

<p>static class/type == static function;</p>

<h4>技巧</h4>

<p>bit manipulation来计算alignment的技巧也非常酷炫，值得学习。</p>

<pre><code class="">static size_t _S_aligned_size(size_t __size, size_t __alignment)
{ return ((__size - 1)|(__alignment - 1)) + 1; }
</code></pre>

<h1>后记</h1>

<p>感谢tim和john给了个充实的暑假，以后想起来啥在写吧，就这样了:)</p>

<p>（特别鸣谢老婆给的关心与支持，爱你❤️）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libstdc++ 初窥]]></title>
    <link href="http://fyou.me/blog/2015/03/29/stdlibc-plus-plus/"/>
    <updated>2015-03-29T00:02:53-04:00</updated>
    <id>http://fyou.me/blog/2015/03/29/stdlibc-plus-plus</id>
    <content type="html"><![CDATA[<p>写了两周stdlibc++.纪录点对c++的理解吧.</p>

<h3><a href="http://en.cppreference.com/w/cpp/language/default_constructor">default constructor</a></h3>

<ol>
<li>constructor 是不能被定义在class外的</li>
<li>当constructor被定义为default, compiler 会生成一个implicity declared constructor, calls the default constructors of the bases and of the non-static members of this class.</li>
</ol>


<h3><a href="http://en.cppreference.com/w/cpp/language/copy_constructor">copy constructors</a></h3>

<ol>
<li>当user没有定义copy ctor的时候, compiler 会生成一个implicity declared的版本.</li>
<li>这个implicity的版本在一定情况下会被delete,详情见cppreference.</li>
</ol>


<h3><a href="http://en.cppreference.com/w/cpp/language/sfinae">SFINAE</a></h3>

<p>Substitution failure is not an error - 编译器不会立刻炸,会搜索next</p>

<h3>类型擦除(把原来的类型去掉，换成统一类型,换言之cast)</h3>

<pre><code>char a[10];
void* ap = (void*)a;
int b;
void* bp = (void*)&amp;b;
</code></pre>

<p>这里就都cast成了void指针。</p>

<p>再来看个Any的例子:</p>

<pre><code>class Any {
public:
  Any() : ptr(nullptr) {}

  Any(const Any&amp; other) {
      ptr = other.ptr-&gt;Copy();
  }

  Any&amp; operator=(const Any&amp; other) {
      this-&gt;~Any();
      ptr = other.ptr-&gt;Copy();
      return *this;
  }

  ~Any() {
      if (ptr != nullptr) {
      delete ptr;
      }
  }

  template&lt;typename T&gt;
    void Assign(const T&amp; data) {
    this-&gt;~Any();
    ptr = new Wrapper&lt;T&gt;(data);
    }

  template&lt;typename T&gt;
    T* Get() {
    auto wrapper = dynamic_cast&lt;Wrapper&lt;T&gt;*&gt;(ptr);
    if (wrapper != nullptr) {
        return &amp;wrapper-&gt;data;
    }
    return nullptr;
    }

private:
  struct AnyData {
      virtual ~AnyData() { }

      virtual AnyData* Copy() = 0;
  };

  template&lt;typename T&gt;
    struct Wrapper : public AnyData {
    Wrapper(const T&amp; data) : data(data) {}

    AnyData* Copy() override {
        return new Wrapper&lt;T&gt;(data);
    }

    T data;
    };

  AnyData* ptr;
};

#include &lt;iostream&gt;

int main() {
    Any a;
    a.Assign&lt;int&gt;(3);
    std::cout &lt;&lt; (a.Get&lt;char&gt;() == nullptr) &lt;&lt; "\n";
    std::cout &lt;&lt; (*a.Get&lt;int&gt;() == 3) &lt;&lt; "\n";

    Any b;
    b = a;
    std::cout &lt;&lt; (*b.Get&lt;int&gt;() == 3) &lt;&lt; "\n";

    return 0;
}
</code></pre>

<h3>Placement new</h3>

<p>通常的new = malloc + ctor, 所以palcement new 就是在分配好的内存地址上再调用一次ctor</p>

<p>通常的delete = dctor + free</p>

<h3>Vtable 的 C 实现</h3>

<pre><code>#include &lt;stdio.h&gt;

typedef void (*GenericFuncPtr)(void);
//use general ptr array store vf pointer

struct Cat {
    GenericFuncPtr* vtable_ptr;
};

void cat_speak(struct Cat* this) {
    printf("miao");
}

void cat_die(struct Cat* this) {
    printf("ewww");
}

GenericFuncPtr cat_vtable[] = {
    // do in the compile time
    (GenericFuncPtr)cat_speak,
    (GenericFuncPtr)cat_die,
};

void construct_cat(struct Cat* c) {
    c-&gt;vtable_ptr = cat_vtable;
}

struct Lion {
    struct Cat base;
};

void lion_speak(struct Lion* this) {
    printf("ow");
}

void lion_die(struct Lion* this) {
    printf("ahhh");
}

GenericFuncPtr lion_vtable[] = {
    (GenericFuncPtr)lion_speak,
    (GenericFuncPtr)lion_die,
};

void construct_lion(struct Lion* l) {
    construct_cat(&amp;l-&gt;base);
    l-&gt;base.vtable_ptr = lion_vtable;
}

int main () {
    struct Lion l;
    struct Cat* c;
    construct_lion(&amp;l);
    c = &amp;l.base;
    // c-&gt;speak
    ((void (*)(struct Lion*))c-&gt;vtable_ptr[0])((struct Lion*)c);
    // c-&gt;die
    ((void (*)(struct Lion*))c-&gt;vtable_ptr[1])((struct Lion*)c);
    return 0;
}
</code></pre>

<h3><a href="http://en.cppreference.com/w/cpp/language/partial_specialization">Partial specialization</a></h3>

<p>Partial specialization 只是针对模版参数,而且function不支持partial specialization.</p>

<pre><code>template &lt;typename _Tp&gt; // primary
class A {
};

template &lt;typename _Tp&gt;
class A&lt;_Tp[]&gt; {
};

template &lt;typename _Tp&gt;
class A&lt;_Tp*&gt; {
};

//template &lt;typename _Tp&gt; //error
//class A&lt;_Tp&gt; {
//};
</code></pre>

<h3><a href="http://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers">Universal ref</a></h3>

<pre><code>template&lt;typename T&gt;
struct A {
    void Foo(T&amp;&amp; /*rvalue ref*/);
};
struct A {
    template&lt;typename T&gt;
      void Foo(T&amp;&amp; /*forwarding ref, or `universal ref`*/);
};
//上面的例子虽然T是模板参数，但不是等着被推出来的。
</code></pre>

<h3><a href="http://en.cppreference.com/w/cpp/utility/variadic">Variadic functions</a></h3>

<p>用法与用处。</p>

<pre><code>#include &lt;iostream&gt;
template &lt;typename T&gt;
class A {
public:
  A() { std::cout &lt;&lt; "without size" &lt;&lt; "\n"; }
  A(size_t size) { std::cout &lt;&lt; "with size" &lt;&lt; "\n"; }
  A(size_t size, size_t idx) { std::cout &lt;&lt; "with size, idx" &lt;&lt; "\n"; }
  ~A() { std::cout &lt;&lt; "dtor" &lt;&lt; "\n"; }
};

template &lt;typename _Tp, typename... Args&gt;
class B : A&lt;_Tp&gt; {
public:
  //B() { std::cout &lt;&lt; "B ctor" &lt;&lt; "\n"; } B&lt;int&gt;b1 wont work;
  B(Args&amp;&amp;... _args) : A&lt;_Tp&gt;(_args...) { }
private:
  //A&lt;_Tp&gt; _a;
};

class Tmp {
public:
  Tmp() { std::cout &lt;&lt; "Tmp ctor" &lt;&lt; "\n"; }
};

int main () {
    //B&lt;int&gt; b1;
    B&lt;int,size_t&gt; b2(1);
    //B&lt;int,size_t&gt; b(1,2); //error
    B&lt;int,size_t,size_t&gt; b3(1,2);

    Tmp tmp;
    Tmp tmp1(); // function !!!!!!!!!!!!
}
</code></pre>

<h3><a href="http://stackoverflow.com/questions/6627651/enable-if-method-specialization">function specialization</a></h3>
]]></content>
  </entry>
  
</feed>
