<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lintcode | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/lintcode/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2019-06-16T01:08:21-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5. Kth Largest Element (快排之思)]]></title>
    <link href="http://fyou.me/blog/2018/04/01/5-kth-largest-element/"/>
    <updated>2018-04-01T14:23:39-07:00</updated>
    <id>http://fyou.me/blog/2018/04/01/5-kth-largest-element</id>
    <content type="html"><![CDATA[<p>起因源于我与同事争论，find kth largest element是O(n)的复杂度还是O(nlogn) 。我一直认为find kth largest element 最优解与快排同源，所以应该是O(nlogn)，事实证明我是错的，实际的解法是快速选择，O(n)最优情况，O(n<sup>2</sup>)最差情况。</p>

<p>解法都大同小异如下: （我取了中间点作为pivot，最简单的做法是取头或者尾作为pivot）</p>

<pre><code class="c++">class Solution {
public:
    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {
        return find(nums, 0, nums.size()-1, k);
    }

    int partition(vector&lt;int&gt;&amp; nums, int begin, int end, int k)
    {
        if (begin &gt; end) return -1; // should not happend
        int p = nums[(end + begin)/2];
        int i  = begin, j = end;
        while(i != j)
        {
            if (nums[j] &gt; p)
            {
                j--;
            }
            else if (nums[i] &lt; p)
            {
                i++;
            }
            else
            {
                std::swap(nums[i], nums[j]);
                if (nums[j] == p) i++; // edge case where after swap if nums[j] == p then we can't --j
                else j--;
            }
        }
        int diff = end-i+1-k;
        if (diff == 0)
        {
            return nums[i];
        }
        else if (diff &gt; 0)
        {
            return find(nums,i+1,end,k); // i j are the same anyways
        }
        else
        {
            return find(nums,begin,j-1,-diff); // i j are the same anyways
        }
    }
};
</code></pre>

<p>关键在于复杂度的分析。</p>

<h4>快排：</h4>

<p>快排的(average)复杂度之所以为O(nlogn)，因为每次partition需要O(n)，</p>

<p><strong>最差情况：</strong>每次partition正好为<code>[]和[0..n]</code> ，也就是<code>T(n)=T(n-1)+T(0)+O(n) -&gt; T(n)=T(n-1)+O(n)-&gt; T(n)=O(n^2)</code></p>

<p><strong>最优情况：</strong>每次partition正好为<code>[0..n/2-1]和[n/2..n]</code> ，也就是<code>T(n)=2T(n/2)+O(n) -&gt; T(n)=O(nlogn)</code></p>

<p>同时也可以简单理解为最差需要partition O(n)次而最优只需要partition O(logn)次</p>

<h4><strong>快速选择：</strong></h4>

<p>快速选择的(average)复杂度之所以为O(n)，因为每次递归只需要partition整个array的一半，</p>

<p><strong>最差情况：</strong>依旧与快排类似，如果每次pivot都选择了最小或者最大，那么还是需要O(n<sup>2</sup>)去完成整个操作</p>

<p><strong>最优情况：</strong>如果pivot正好选择了中间值，那么<code>T(n)=T(n/2)+O(n) -&gt; T(n)=2O(n) -&gt; T(n)=O(n)</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[427. Generate Parentheses]]></title>
    <link href="http://fyou.me/blog/2018/03/28/427-generate-parentheses/"/>
    <updated>2018-03-28T00:05:47-07:00</updated>
    <id>http://fyou.me/blog/2018/03/28/427-generate-parentheses</id>
    <content type="html"><![CDATA[<p><a href="http://www.lintcode.com/en/problem/generate-parentheses/">http://www.lintcode.com/en/problem/generate-parentheses/</a></p>

<p>这道题给定n，然后输出所有长度为2n的valid parentheses.</p>

<p><strong>解法一：</strong></p>

<p>最简单的解法是枚举，用两个变量num_of_left, num_of_right去track还有多少个左括号和右括号可以使用。只要有左括号可以用就可以继续递归generate，但是只有可用右括号大于左括号时候才可以继续递归generate，防止&#8221;)(&ldquo;的情况。</p>

<pre><code class="c++">class Solution {
public:
    vector&lt;string&gt; generateParenthesis(int n) {
        vector&lt;string&gt; ret;
        generate(ret, "", n, n);
        return ret;
    }

    void generate(
        vector&lt;string&gt;&amp; ret,
        string s,
        int num_of_left,
        int num_of_right)
    {
        if (num_of_left == 0 &amp;&amp; num_of_right == 0)
        {
            ret.push_back(s);
            return;
        }

        if (num_of_left &gt; 0)
        {
            generate(ret, s+"(", num_of_left-1, num_of_right);
        }
        if (num_of_right &gt; num_of_left)
        {
            generate(ret, s+")", num_of_left, num_of_right-1);
        }
    }
};
</code></pre>

<p><strong>解法二：</strong></p>

<p>dp的思路 ，想求第f(n)，就是将&#8221;()&ldquo;加入f(n-1)的结果：</p>

<p>f(0): &ldquo;&rdquo;</p>

<p>f(1): &ldquo;(&#8220;f(0)&rdquo;)&#8221;</p>

<p>f(2): &ldquo;(&#8220;f(0)&rdquo;)&ldquo;f(1), &rdquo;(&ldquo;f(1)&rdquo;)&#8221;</p>

<p>f(3): &ldquo;(&#8220;f(0)&rdquo;)&ldquo;f(2), &rdquo;(&ldquo;f(1)&rdquo;)&ldquo;f(1), &rdquo;(&ldquo;f(2)&rdquo;)&#8221;</p>

<p>所以 f(n) = &ldquo;(&#8220;f(0)&rdquo;)&ldquo;f(n-1) , &rdquo;(&ldquo;f(1)&rdquo;)&ldquo;f(n-2) &rdquo;(&ldquo;f(2)&rdquo;)&ldquo;f(n-3) … &rdquo;(&ldquo;f(i)&rdquo;)&ldquo;f(n-1-i) … &rdquo;(f(n-1)&ldquo;)&rdquo;</p>

<pre><code class="c++">class Solution {
public:
    vector&lt;string&gt; generateParenthesis(int n) {
        vector&lt;vector&lt;string&gt;&gt; tmp = ;
        for (int j = 1; j &lt;= n; ++j)
        {
            vector&lt;string&gt; vec;
            for (int i = 0; i &lt; j; ++i)
            {
                for (auto fst : tmp[i])
                {
                    for (auto snd : tmp[j-i-1])
                    {
                        vec.push_back("("+fst+")"+snd);
                    }
                }
            }
            tmp.push_back(vec);
        }
        return tmp.back();
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[919. Meeting Rooms II]]></title>
    <link href="http://fyou.me/blog/2018/03/21/919-meeting-rooms-ii/"/>
    <updated>2018-03-21T22:24:39-07:00</updated>
    <id>http://fyou.me/blog/2018/03/21/919-meeting-rooms-ii</id>
    <content type="html"><![CDATA[<p>考察Interval intersection, 一次遍历内解决问题和多维数组一直是我的弱项。</p>

<h4>920. <a href="http://www.lintcode.com/en/problem/meeting-rooms/">Meeting Rooms</a></h4>

<p>这道题给一个Interval list只考察Interval有无交集，所以从第二个element开始，只要test自己的start是否小于前一个Interval的end。(前提：List以Interval start sorted)</p>

<pre><code class="c++">class Solution {
public:
    bool canAttendMeetings(vector&lt;Interval&gt; &amp;intervals) {
        if (intervals.size() &lt;= 1) return true;
        sort(
            intervals.begin(),
            intervals.end(),
            [](const Interval &amp;a, const Interval &amp;b)
            {
                return a.start &lt; b.start;
            });
        for (int i = 1; i &lt; intervals.size(); ++i)
        {
            if (intervals[i].start &lt; intervals[i-1].end) return false;
        }
        return true;
    }
};
</code></pre>

<h4>919. <a href="http://www.lintcode.com/en/problem/meeting-rooms-ii/">Meeting Rooms II</a></h4>

<p>这道题唯一的区别是要算出在同一时间点，有多少同时进行的meeting，得出需要多少个不同的meeting room。</p>

<p>我的初始想法是将每一个interval的时间点都存入hashmap，然后遍历一遍map，算出最大值。这个解法works，但是耗费了很多空间，大部分的时间点存在hashmap里都毫无意义，唯有start和end才是我们关注的，所以改进的解法是将start和end同时存进一个vector并mark上每个点是start还是end，然后sort这个vector，最后遍历一遍vector，start的点counter++，end的点counter&#8211;，同时track max value。</p>

<pre><code class="c++">class Solution {
public:
    bool START = true;
    bool END = false;

    int minMeetingRooms(vector&lt;Interval&gt; &amp;intervals) {
        vector&lt;pair&lt;int, bool&gt;&gt; vec;
        for (const auto&amp; itv : intervals)
        {
            vec.push_back(make_pair(itv.start, START));
            vec.push_back(make_pair(itv.end, END));
        }

        std::sort(vec.begin(), vec.end(),
        [](const auto&amp; l, const auto&amp; r) {
            return l.first &lt; r.first;
        });

        int rooms = 0, current = 0;
        for (const auto&amp; it : vec)
        {
            if (it.second)
            {
                current++;
            }
            else
            {
                current--;
            }
            rooms = std::max(rooms, current);
        }

        return rooms;
    }
};
</code></pre>

<p>同时在网上看到了两个不错的解法。</p>

<h5>解法一：</h5>

<p>还是使用hashmap，但是只存start和end点的count，最后遍历map，然后sum所有start和end，并且track max value，最后max value就是结果。</p>

<pre><code class="c++">class Solution {
public:
    int minMeetingRooms(vector&lt;Interval&gt;&amp; intervals) {
        map&lt;int, int&gt; m;
        for (auto a : intervals) {
            ++m[a.start];
            --m[a.end];
        }
        int rooms = 0, res = 0;
        for (auto it : m) {
            res = max(res, rooms += it.second);
        }
        return res;
    }
};
</code></pre>

<h5>解法二：</h5>

<p>使用最小堆去track离当前最近的会议结束的时间(last.end)，如果last.end &lt;= cur.start，就表示上一个会议已经结束，可以将其从heap里pop出去，这样我们动态的maintain了一个heap，heap的size就表示当前的会议一共要多少间会议室。</p>

<pre><code class="c++">class Solution {
public:
    int minMeetingRooms(vector&lt;Interval&gt;&amp; intervals) {
        sort(intervals.begin(), intervals.end(), [](const Interval &amp;a, const Interval &amp;b){return a.start &lt; b.start;});
        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;
        for (auto a : intervals) {
            if (!q.empty() &amp;&amp; q.top() &lt;= a.start) q.pop();
            q.push(a.end);
        }
        return q.size();
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
