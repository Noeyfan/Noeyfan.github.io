<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: toposort | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/toposort/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2021-04-06T22:47:06-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[269. Alien Dictionary and Topological Sort]]></title>
    <link href="http://fyou.me/blog/2019/02/08/269-alien-dictionary-and-topological-sort/"/>
    <updated>2019-02-08T23:42:37-08:00</updated>
    <id>http://fyou.me/blog/2019/02/08/269-alien-dictionary-and-topological-sort</id>
    <content type="html"><![CDATA[<p>好久没碰到过拓扑排序的题目了，今天突然写到，花了4个小时 :( 这题的难点在于，找到它和拓扑排序的关系，以及如何构建graph.</p>

<h5>如何构建graph</h5>

<p>一开始想的有些复杂，其实就是两成对，找到第一个不相同的pair of char，即为graph的一条边</p>

<h5>拓扑排序</h5>

<p>拓扑排序适用于：</p>

<ul>
<li>多src和dependency的排序</li>
<li>找graph里是否有环</li>
</ul>


<p>这题正好需要这两点，拓扑排序首先将没有incoming edge的点加入queue中，当queue不为空时，一直循环并update queue里所有点的neighbor的 incoming edge count，如果update之后 count == 0则加入queue中。</p>

<p>如果有环的话那么环中的每个node的incoming edge都永远不会是0，所有最后只要比较一下结果的size是不是包含了所有node，就可以知道有没有环了。</p>

<pre><code class="c++">class Solution {
public:
    string mergeOrders(
        unordered_map&lt;char, unordered_set&lt;char&gt;&gt;&amp; g,
        unordered_map&lt;char, int&gt;&amp; cnt
    ) {       
        queue&lt;char&gt; q;

        for (const auto&amp; [ch, c] : cnt) {
            if (c == 0) {
                q.push(ch);
            }
        }

        string ret = "";
        while(!q.empty()) {
            char c = q.front();
            q.pop();

            ret += c;
            for (const auto&amp; e : g[c]) {
                cnt[e]--;
                if (cnt[e] == 0) q.push(e);
            }
        }

        if (ret.size() != cnt.size()) return "";
        return ret;
    }

    string alienOrder(vector&lt;string&gt;&amp; words) {
        unordered_map&lt;char, unordered_set&lt;char&gt;&gt; g;
        unordered_map&lt;char, int&gt; cnt;

        for (int i = 0; i &lt; words.size(); ++i) {
            for (int j = 0; j &lt; words[i].size(); ++j) {
                cnt[words[i][j]] = 0;
            }
        }

        for (int i = 0; i &lt; words.size()-1; ++i) {
            string&amp; cur = words[i];
            string&amp; next = words[i+1];

            int limit = min(cur.size(), next.size());
            for (int j = 0; j &lt; limit; ++j) {
                if (cur[j] != next[j]) {
                    if (g[cur[j]].find(next[j]) == g[cur[j]].end()) {
                        g[cur[j]].insert(next[j]);
                        cnt[next[j]] += 1;
                    }
                    break;
                }
            }
        }

        return mergeOrders(g, cnt);
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
