<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dp | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/dp/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2019-06-16T00:51:36-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[322. Coin Change and Classic DP]]></title>
    <link href="http://fyou.me/blog/2019/03/23/322-coin-change-and-classic-dp/"/>
    <updated>2019-03-23T17:35:31-07:00</updated>
    <id>http://fyou.me/blog/2019/03/23/322-coin-change-and-classic-dp</id>
    <content type="html"><![CDATA[<p>这题是一道经典dp题，最初在写这题的时候由于使用了backtracking，逻辑混乱不堪，想了一下区分back tracking和dfs的题目：</p>

<ul>
<li>back tracking: 需要列出所有的combination</li>
<li>dfs: 只需要一个最优解</li>
</ul>


<h4>最直观解法 dfs + memorization (slow but polynomial time)</h4>

<p>没什么好说的就是搜索加memorization.</p>

<pre><code class="c++">class Solution {
public:
    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {
        unordered_map&lt;int, int&gt; cache;
        int result = imp(coins, amount, cache);
        return result == INT_MAX ? -1 : result;
    }

    int imp(vector&lt;int&gt;&amp; coins, int remaining, unordered_map&lt;int, int&gt;&amp; cache) {
        if (remaining == 0) return 0;
        if (remaining &lt; 0) return INT_MAX;
        if (cache.count(remaining)) return cache[remaining];

        int resultMin = INT_MAX;
        for (int i = 0; i &lt; coins.size(); ++i) {
            int curMin = imp(coins, remaining-coins[i], cache);
            if (curMin == INT_MAX) continue;  // handle overflow
            resultMin = min(curMin+1, resultMin);
        }

        cache[remaining] = resultMin;
        return resultMin;
    }
};
</code></pre>

<h4>最优解法 dp (O(A * N))</h4>

<p>子问题其实由dfs的解法很容易发现，<code>dp[i] = min(dp[i], dp[i-c] + 1)</code>, c在这里意味着coins里的任何一个。翻译过来就是对于每一个amount的最优解就是当前存下的值或者是拿coins里的某一个c之前的最优值+1。</p>

<pre><code class="c++">class Solution {
public:
    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {
        vector&lt;int&gt; dp(amount+1, amount+1);  // use amount+1 to prevent IN_MAX overflow.
        dp[0] = 0;
        for (int i = 1; i &lt;= amount; ++i) {
            for (int j = 0; j &lt; coins.size(); ++j) {
                if (coins[j] &lt;= i) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }

        return dp[amount] &gt; amount ? -1 : dp[amount];
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[736. Parse Lisp Expression]]></title>
    <link href="http://fyou.me/blog/2018/03/11/736-parse-lisp-expression/"/>
    <updated>2018-03-11T21:46:05-07:00</updated>
    <id>http://fyou.me/blog/2018/03/11/736-parse-lisp-expression</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/parse-lisp-expression/description/">https://leetcode.com/problems/parse-lisp-expression/description/</a></p>

<p>(很喜欢leetcode里的这个解法，故此记录一下，不太喜欢的是使用了deque存symbol table，如果直接用map作为递归参数会更好。)</p>

<p>解法用了top-down parsing，用getToken和++pos来consume token，优先处理add/mult的简单情况，然后处理let，逻辑清晰，值得学些。</p>

<pre><code class="c++">class Solution {
public:
    int evaluate(string expression) {
        scopes_.clear();
        int pos = 0;
        return eval(expression, pos);
    }
private:
    int eval(const string&amp; s, int&amp; pos) {
        scopes_.push_front(unordered_map&lt;string, int&gt;());
        int value = 0; // The return value of current expr
        if (s[pos] == '(') ++pos;

        // command, variable or number
        const string token = getToken(s, pos);

        if (token == "add") {
            int v1 = eval(s, ++pos);
            int v2 = eval(s, ++pos);
            value = v1 + v2;
        } else if (token == "mult") {
            int v1 = eval(s, ++pos);
            int v2 = eval(s, ++pos);
            value = v1 * v2;
        } else if (token == "let") {
            string var;
            // expecting " var1 exp1 var2 exp2 ... last_expr)"
            while (s[pos] != ')') {
                ++pos;
                // Must be last_expr
                if (s[pos] == '(') {
                    value = eval(s, ++pos);
                    break;
                }
                // Get a token, could be "x" or "-12" for last_expr
                var = getToken(s, pos);
                // End of let, var is last_expr
                if (s[pos] == ')') {
                    if (isalpha(var[0]))
                        value = getValue(var);
                    else
                        value = stoi(var);
                    break;
                }
                // x -12 -&gt; set x to -12 and store in the current scope and take it as the current return value
                value = scopes_.front()[var] = eval(s, ++pos);
            }
        } else if (isalpha(token[0])) {
            value = getValue(token); // symbol
        } else {
            value = std::stoi(token); // number
        }
        if (s[pos] == ')') ++pos;
        scopes_.pop_front();
        return value;
    }

    int getValue(const string&amp; symbol) {
        for (const auto&amp; scope : scopes_)
            if (scope.count(symbol)) return scope.at(symbol);
        return 0;
    }

    // Get a token from current pos.
    // "let x" -&gt; "let"
    // "-12 (add x y)" -&gt; "-12"
    string getToken(const string&amp; s, int&amp; pos) {
        string token;
        while (pos &lt; s.length()) {
            if (s[pos] == ')' || s[pos] == ' ') break;
            token += s[pos++];
        }
        return token;
    }

    deque&lt;unordered_map&lt;string, int&gt;&gt; scopes_;
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10. Regular Expression Matching]]></title>
    <link href="http://fyou.me/blog/2017/06/07/regex-matching/"/>
    <updated>2017-06-07T01:30:00-07:00</updated>
    <id>http://fyou.me/blog/2017/06/07/regex-matching</id>
    <content type="html"><![CDATA[<p>准备督促自己刷刷题／打打codejam，保持手感，记录一些难倒过自己的题目，从错误开始到正确思路，（也许）包括一些深入的拓展。</p>

<h4>题目</h4>

<p>第一题就从<a href="https://leetcode.com/problems/regular-expression-matching/">Regular Expression Matching</a>开始好了，简言之写个方法:</p>

<pre><code class="c++">bool isMatch(string s, string regex);
</code></pre>

<h4>思路</h4>

<p>超简化的Regular Expression Matching，通常只包含：<code>* . [a-Z]</code>几种元素，所以从简单入手分析所有可能的match情形:</p>

<ul>
<li><code>[a-Z]</code> 和 <code>[a-Z]</code>，属于exact match，只需要关注当前位置</li>
<li><code>[a-Z]</code> 和 <code>.</code>， 属于any match，与上种情况类似，但是<code>\0</code> 和 <code>.</code> 是不能match的</li>
<li><code>[a-Z]</code> 和 <code>([a-Z]|.)*</code>，属于repeat match, 也是这题的唯一难点，有两种情况，且可以用DFS暴力解决：

<ul>
<li><code>*</code> match >=1 次: <code>[a-Z]</code> match <code>[a-Z]|.</code>  &amp;&amp; <code>s+1</code> 也要match <code>regex</code></li>
<li><code>*</code> match 0 次: <code>s</code> match <code>regex+2</code></li>
</ul>
</li>
</ul>


<h4>曾犯错误</h4>

<p>之下都是我在面试或者写题中出现过的错误：</p>

<ul>
<li>与WildCardMatching混淆，认为一个for loop可以解决（非DP）</li>
<li>边界情况 <code>""</code> 与 <code>.*</code>的match</li>
<li>For loop 和DFS 在此处混用，逻辑不清（紧张？？？）</li>
<li>强行用c++ string 进DFS却又不想用index （<code>string::data() -&gt; const char*</code>）</li>
<li>没有处理<code>\0</code> 和 <code>.</code> 的情况</li>
</ul>


<p>不怕笑话，试着回忆一些面试写的丑逼代码：</p>

<h5>丑1:</h5>

<pre><code class="c++">bool isMatch(string s, string regex) {
  if (s.empty() &amp;&amp; regex.empty()) return false;
  int r_i = 0;
  for (int i = 0; i &lt; s.size(); ++i) {
    if (s[i] == regex[r_i]) {
      return isMatch(s.substr(i), regex.substr(r_i));
    }
    if (regex[r_i] == '*') { // should be regex[r_i+1] == '*'
      return isMatch(s.substr(i+1), regex.substr(r_i-1))
        || isMatch(s.substr(i), regex.substr(r_i+1));
    }
    if (regex[r_i] == '.') {
      return isMatch(s.substr(i+1), regex.substr(r_i+1));
    }
    return false;
  }
  return false;
}
</code></pre>

<h5>丑2：</h5>

<pre><code class="c++">bool isMatch(string s, string p) {
  return imp(s.data(), p.data());
}

bool imp(const char* c, const char* p) {
    if (*c == '\0' &amp;&amp; *p == '\0') {
        return true;
    }
    if (*p == '\0' || *c == '\0') return false; // ??? patching
    if (*(p+1) == '*') {
        return isMatch(c+1, p) || isMatch(c+1, p+2); // should be || isMatch(c, p+2)
    }
    if (*c == *p || *p == '.') {  // '\0' and '.'
        return isMatch(c+1, p+1);
    }
    return false;
}
</code></pre>

<h4>正确姿势</h4>

<h5>DFS</h5>

<p>算法清晰的情况下，DFS 解法基本等同于直接翻译：</p>

<pre><code class="c++">bool isMatch(string s, string p) {
  return imp(s.data(), p.data());
}

bool imp(const char* c, const char* p) {
    // only when regex reaches the end, *c check make sense
    if (*p == '\0') return *c == '\0';
    if (*(p+1) == '*') {
        return
          imp(c, p+2)
          // test if c is end of string then we can safely
          // recursively call imp(c+1, p)
          || ((*p == *c || (*c != '\0' &amp;&amp; *p == '.'))
                &amp;&amp; imp(c+1, p));
    }
    if (*c == *p || (*c != '\0' &amp;&amp; *p == '.')) {
        return imp(c+1, p+1);
    }
    return false;
}
</code></pre>

<h5>DP</h5>

<p>DP的关键在于构建状态转移矩阵，而此处构建的方法为：令 <code>bool f[i][j]</code>为 <code>s[i-1]</code> match <code>p[j-1]</code> 的情况，然后写出 <code>f[i][j]</code> 与 <code>p[i-1]</code> <code>j[i-1]</code> 的关系，相同<strong>思路</strong>。</p>

<p>其中初始化<code>f[0][j]</code>要有讲究（也就是<code>empty string</code> 与 什么样的<code>regex</code>算matching）。</p>

<p>详细请看代码注释：</p>

<pre><code class="c++">// Copy from Leetcode
bool isMatch(string s, string p) {
    /**
     * f[i][j]: if s[0..i-1] matches p[0..j-1]
     * if p[j - 1] != '*'
     *      f[i][j] = f[i - 1][j - 1] &amp;&amp; s[i - 1] == p[j - 1]
     * if p[j - 1] == '*', denote p[j - 2] with x
     *      f[i][j] is true iff any of the following is true
     *      1) "x*" repeats 0 time and matches empty: f[i][j - 2]
     *      2) "x*" repeats &gt;= 1 times and matches "x*x": s[i - 1] == x &amp;&amp; f[i - 1][j]
     * '.' matches any single character
     */
    int m = s.size(), n = p.size();
    vector&lt;vector&lt;bool&gt;&gt; f(m + 1, vector&lt;bool&gt;(n + 1, false));

    f[0][0] = true;
    for (int i = 1; i &lt;= m; i++)
        f[i][0] = false;
    // p[0.., j - 3, j - 2, j - 1] matches empty iff p[j - 1] is '*' 
    // and p[0..j - 3] matches empty
    for (int j = 1; j &lt;= n; j++)
        f[0][j] = j &gt; 1 &amp;&amp; '*' == p[j - 1] &amp;&amp; f[0][j - 2];

    for (int i = 1; i &lt;= m; i++)
        for (int j = 1; j &lt;= n; j++)
            if (p[j - 1] != '*') {
                f[i][j] = f[i - 1][j - 1] &amp;&amp; (s[i - 1] == p[j - 1] 
                                              || '.' == p[j - 1]);
            }
            else
                // p[0] cannot be '*' so no need to check "j &gt; 1" here
                f[i][j] = f[i][j - 2] || (s[i - 1] == p[j - 2] 
                                          || '.' == p[j - 2]) &amp;&amp; f[i - 1][j];

    return f[m][n];
}
</code></pre>

<h4>拓展</h4>

<ul>
<li>尝试用NFA解决真正的<code>regex</code>问题，尝试自己土制了一个小 <a href="https://github.com/Noeyfan/noey_algos/blob/master/noey_regex.h">regex lib</a>.</li>
<li>还有Tim的 <a href="https://gist.github.com/Noeyfan/1c60fa6555f6cdc50fd2f55d78aed8a9">compile time regex (no parsing)</a></li>
</ul>


<h4>相似题目</h4>

<p><code>// placeholder，将遇到的相似题目加入此处</code></p>
]]></content>
  </entry>
  
</feed>
