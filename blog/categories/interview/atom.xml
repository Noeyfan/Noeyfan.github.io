<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interview | NOEY]]></title>
  <link href="http://fyou.me/blog/categories/interview/atom.xml" rel="self"/>
  <link href="http://fyou.me/"/>
  <updated>2019-03-17T18:10:24-07:00</updated>
  <id>http://fyou.me/</id>
  <author>
    <name><![CDATA[Fan You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Task Scheduler with Gaps]]></title>
    <link href="http://fyou.me/blog/2019/03/17/task-scheduler-with-gaps/"/>
    <updated>2019-03-17T17:53:38-07:00</updated>
    <id>http://fyou.me/blog/2019/03/17/task-scheduler-with-gaps</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/task-scheduler/">https://leetcode.com/problems/task-scheduler/</a></p>

<p><a href="https://leetcode.com/problems/rearrange-string-k-distance-apart/">https://leetcode.com/problems/rearrange-string-k-distance-apart/</a></p>

<p>与一般的Scheduling问题不同，这题要求每个task之间最少间隔<code>x</code> gaps.</p>

<p>做法是priority_queue + greedy (未证明)，以&#8221;AAABBC&#8221;，x=3为例，greedy的过程大致为，从frequency最高的元素开始，依次填空</p>

<ol>
<li><code>A__A__A__</code></li>
<li><code>AB_AB_A__</code></li>
<li><code>ABCAB_A__</code> (注意trailing idle time是不需要的)</li>
</ol>


<p>所以最终的结果是<code>ABCAB_A</code>= <code>7</code></p>

<p>Implementation 复杂度为</p>

<pre><code class="c++">class Solution {
public:
    int leastInterval(vector&lt;char&gt;&amp; tasks, int n) {
        unordered_map&lt;char, int&gt; taskCounts;
        priority_queue&lt;int&gt; taskQ;

        // O(t) count
        for (auto t : tasks) {
            ++taskCounts[t];
        }

        // O(tlogt) insert
        for (auto [t, freq]: taskCounts) {
            taskQ.push(freq);
        }

        int cycle = 0;
        while (!taskQ.empty()) {
            vector&lt;int&gt; remainingTasks;

            int idle = 0;
            int gaps = n;
            // note while (--i) and while (i--) executes different times
            // * while (--i) i-1 times
            // * while (i--) i   times
            while (gaps-- &gt;= 0) {
                if (!taskQ.empty()) {
                    remainingTasks.push_back(taskQ.top());
                    taskQ.pop(); 
                    ++cycle;
                } else {
                    ++idle;
                }
            }

            for (auto tf : remainingTasks) {
                if (--tf &gt; 0) {
                    taskQ.push(tf);
                }
            }

            if (!taskQ.empty()) {
                // to avoid trailing idle time
                cycle += idle;
            }
        }

        return cycle;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[324.Wiggle Sort II and Dutch National Flag Problem]]></title>
    <link href="http://fyou.me/blog/2019/02/28/324-dot-wiggle-sort-ii-and-dutch-national-flag-problem/"/>
    <updated>2019-02-28T12:16:37-08:00</updated>
    <id>http://fyou.me/blog/2019/02/28/324-dot-wiggle-sort-ii-and-dutch-national-flag-problem</id>
    <content type="html"><![CDATA[<p>一种特殊排序，排完以后要满足奇数位大于左右，偶数位小于左右。</p>

<p><code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3] &gt; nums[4]...</code></p>

<h5>解法一 O(nlogn) time, O(n) space</h5>

<p>将原数组拷贝然后排序，最后从拷贝交叉插入原数组。</p>

<p>值得注意的点在于 <code>j = (n+1)/2</code>的选取，原因是当数组为奇数的时候，选取靠后的index可以避免<code>m</code> underflow.</p>

<pre><code class="c++">class Solution {
public:
    void wiggleSort(vector&lt;int&gt;&amp; nums) {
        vector&lt;int&gt; tmp = nums;
        int n = nums.size(), m = (n+1)/2, k = n;

        sort(tmp.begin(), tmp.end());
        for (int i = 0; i &lt; n; ++i) {
            nums[i] = i &amp; 1 ? tmp[--k] : tmp[--m];
        }
    }
};
</code></pre>

<h5>解法二 O(n) time, O(n) space</h5>

<p>其实为了得到交叉排序的数组并不需要sort整个数组，只需要将数组一分为二 (按照median 做 partition)，然后再做交叉插入</p>

<pre><code class="c++">class Solution {
public:
    void wiggleSort(vector&lt;int&gt;&amp; nums) {
        if (nums.size() &lt; 2) return;

        int n = nums.size(), m = (n+1)/2;
        vector&lt;int&gt; copy = nums;

        // find median
        nth_element(nums.begin(), nums.begin() + m, nums.end());
        int mid = nums[m];

        threeWay(copy, mid);

        // if odd pick from right partition
        // if even pick from left partition
        for (int i = 0; i &lt; nums.size(); ++i) {
            nums[i] = i &amp; 1 ? copy[--n] : copy[--m];
        }
    }

    // https://en.wikipedia.org/wiki/Dutch_national_flag_problem
    void threeWay(vector&lt;int&gt;&amp; A, int mid) {
        int i = 0, j = 0, k = A.size() - 1;

        while(j &lt;= k) {
            if (A[j] &lt; mid) {
                swap(A[i], A[j]);
                i++; j++;
            } else if (A[j] &gt; mid) {
                swap(A[j], A[k]);
                k--;
            } else {
                j++;
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[269. Alien Dictionary and Topological Sort]]></title>
    <link href="http://fyou.me/blog/2019/02/08/269-alien-dictionary-and-topological-sort/"/>
    <updated>2019-02-08T23:42:37-08:00</updated>
    <id>http://fyou.me/blog/2019/02/08/269-alien-dictionary-and-topological-sort</id>
    <content type="html"><![CDATA[<p>好久没碰到过拓扑排序的题目了，今天突然写到，花了4个小时 :( 这题的难点在于，找到它和拓扑排序的关系，以及如何构建graph.</p>

<h5>如何构建graph</h5>

<p>一开始想的有些复杂，其实就是两成对，找到第一个不相同的pair of char，即为graph的一条边</p>

<h5>拓扑排序</h5>

<p>拓扑排序适用于：</p>

<ul>
<li>多src和dependency的排序</li>
<li>找graph里是否有环</li>
</ul>


<p>这题正好需要这两点，拓扑排序首先将没有incoming edge的点加入queue中，当queue不为空时，一直循环并update queue里所有点的neighbor的 incoming edge count，如果update之后 count == 0则加入queue中。</p>

<p>如果有环的话那么环中的每个node的incoming edge都永远不会是0，所有最后只要比较一下结果的size是不是包含了所有node，就可以知道有没有环了。</p>

<pre><code class="c++">class Solution {
public:
    string mergeOrders(
        unordered_map&lt;char, unordered_set&lt;char&gt;&gt;&amp; g,
        unordered_map&lt;char, int&gt;&amp; cnt
    ) {       
        queue&lt;char&gt; q;

        for (const auto&amp; [ch, c] : cnt) {
            if (c == 0) {
                q.push(ch);
            }
        }

        string ret = "";
        while(!q.empty()) {
            char c = q.front();
            q.pop();

            ret += c;
            for (const auto&amp; e : g[c]) {
                cnt[e]--;
                if (cnt[e] == 0) q.push(e);
            }
        }

        if (ret.size() != cnt.size()) return "";
        return ret;
    }

    string alienOrder(vector&lt;string&gt;&amp; words) {
        unordered_map&lt;char, unordered_set&lt;char&gt;&gt; g;
        unordered_map&lt;char, int&gt; cnt;

        for (int i = 0; i &lt; words.size(); ++i) {
            for (int j = 0; j &lt; words[i].size(); ++j) {
                cnt[words[i][j]] = 0;
            }
        }

        for (int i = 0; i &lt; words.size()-1; ++i) {
            string&amp; cur = words[i];
            string&amp; next = words[i+1];

            int limit = min(cur.size(), next.size());
            for (int j = 0; j &lt; limit; ++j) {
                if (cur[j] != next[j]) {
                    if (g[cur[j]].find(next[j]) == g[cur[j]].end()) {
                        g[cur[j]].insert(next[j]);
                        cnt[next[j]] += 1;
                    }
                    break;
                }
            }
        }

        return mergeOrders(g, cnt);
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[787. Shortest Path with Constraint]]></title>
    <link href="http://fyou.me/blog/2019/02/02/787-shortest-path-with-constraint/"/>
    <updated>2019-02-02T13:08:21-08:00</updated>
    <id>http://fyou.me/blog/2019/02/02/787-shortest-path-with-constraint</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></p>

<p>在Weighted DAG里找到src到dst的最短路，且中间经过的点不能超过K. <a href="https://github.com/Noeyfan/CodingPractice/blob/master/leetcode/cheapestFlightsWitinKStopsImproved.cc">Solution with Path Tracking</a></p>

<h5>Dijkstra, 使用priority_queue：</h5>

<p>跟Dijkstra 最短路的思想类似，从src开始，一直往pq里插入所有可能的path，然后greedy的每轮只拿最小的vertice继续往前走，直到找到dst.</p>

<p>由于必须同时满足:</p>

<ul>
<li>v.k >= -1</li>
<li>v.index == dst</li>
</ul>


<p>而且一直都用priority_queue找最小的，所以不存在early return的情况。</p>

<p>这个解法有很多的element会被repeatedly insert，memory usage大约到达了第二种解法的两倍! （因为priority_queue不支持decreaseKey operation，所以我们没办法in-place update已经有的key）</p>

<pre><code class="c++">class Solution {
    struct V {
        int dist, index, k;
    };

public:
    int findCheapestPriceDijk(int n,
                          const vector&lt;vector&lt;int&gt;&gt;&amp; flights,
                          int src, int dst, int K) {
        // build graph
        unordered_map&lt;int, unordered_map&lt;int, int&gt;&gt; g;
        for (const auto&amp; e : flights) {
            g[e[0]][e[1]] = e[2]; // from, to, weight
        }

        // tracker
        vector&lt;int&gt; pathTo(n);

        // Dijkstra
        using T = tuple&lt;int, int, int&gt;;
        priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt; pq;  // dis, k, cur
        pq.push({0, K, src});

        while (!pq.empty()) {
            auto [dis, k, from] = pq.top();
            pq.pop();

            if (k &lt; -1) continue;
            if (from == dst) return dis;

            for (const auto&amp; [to, price] : g[from]) {
                pq.push({price + dis, k - 1, to});
            }
        }

        return -1;
    }
};
</code></pre>

<h5>SPFA, 使用queue:</h5>

<p>SFPA（其实就是BFS!）从src一直往dst找，每轮挪动1，同时一直keep track cheapest，distTo存在的意义就在于cache 已经visited过的vertice (optimize performance)。</p>

<pre><code class="c++">class Solution {
public:
    int findCheapestPrice(int n, vector&lt;vector&lt;int&gt;&gt;&amp; flights, int src, int dst, int K) {
        int cheapest = -1;

        unordered_map&lt;int, unordered_map&lt;int, int&gt;&gt; adj_list;
        vector&lt;int&gt; distTo(n);
        distTo[src] = -1;

        for (const auto&amp; flight : flights) {
            adj_list[flight[0]][flight[1]] = flight[2];
        }

        // {index, price}
        queue&lt;pair&lt;int, int&gt;&gt; q;
        q.push({src, 0});

        while (!q.empty() &amp;&amp; K &gt;= -1 ) {
            int size = q.size();            
            while (size-- &gt; 0) {    // concise
                auto cur = q.front();
                int index = cur.first, price = cur.second;
                q.pop();

                if (index == dst) {
                    cheapest = -1 == cheapest ? price : min(cheapest, price);
                }
                else
                {
                    for (const auto&amp; e : adj_list[index]) {
                        if (distTo[e.first] == 0 || distTo[e.first] &gt; e.second + price) {
                            q.push({e.first, price + e.second});
                            distTo[e.first] = price + e.second;
                        }
                    }
                }
            }

            K--;
        }

        return cheapest;
    }
};
</code></pre>

<h5>SPFA Rev2</h5>

<pre><code class="c++">class Solution {
public:
    int findCheapestPrice(int n,
                          const vector&lt;vector&lt;int&gt;&gt;&amp; flights,
                          int src, int dst, int K) {
        // build graph
        unordered_map&lt;int, unordered_map&lt;int, int&gt;&gt; g;
        for (const auto&amp; e : flights) {
            g[e[0]][e[1]] = e[2]; // from, to, weight
        }

        // SPFA
        // setup
        vector&lt;int&gt; distTo(n, INT_MAX);
        // vector&lt;char&gt; inQueue(n, false);  -&gt; optional optimization
        queue&lt;tuple&lt;int, int, int&gt;&gt; q;   // cur, K, acc

        // init
        q.push({src, K, 0});
        // inQueue[src] = true;

        while (!q.empty()) {
            auto [cur, k, acc] = q.front();
            q.pop();
            // inQueue[src] = false;

            if (k &lt; 0) {  // k stop, k+1 edges
                continue;
            }

            for (const auto&amp; [to, weight] : g[cur]) {
                if (distTo[to] &gt; acc + weight) {
                    distTo[to] = acc + weight;
                    // if (!inQueue[to]) {
                        q.push({to, k - 1, acc + weight});
                    // }
                }
            }
        }

        return distTo[dst] == INT_MAX ? -1 : distTo[dst];
    }
};
</code></pre>

<h4>Floyd （复杂度高 O(n<sup>3</sup>)）</h4>

<p>基于动态规划的做法。</p>

<h4>Dijkstra（不能处理负环和负边）</h4>

<p>复杂度为<code>O(E*logV)</code></p>

<p>适合dense 和 sparse graph</p>

<p>从这里让我想到了implement 一下Dijkstra。其实跟解法1确实非常相似，但是也有同样的问题就是priority_queue没办法in-place update key。</p>

<p>还有一点不一样的是，Dijkstra没有K的限制，所以可以keep track两个东西:</p>

<ul>
<li>distTo</li>
<li>edgeTo</li>
</ul>


<p>然后在插入的时候只有最优解的时候才插入，其他时候直接跳过。（priority_queue的解法则不行，必须得插入所有的元素因为不到找到dst不知道哪个会是最短的）</p>

<p><a href="https://github.com/Noeyfan/noey_algos/blob/master/trivival/dijkstra.cc">Code</a></p>

<h4>Bellman-Ford （都能处理）</h4>

<p>复杂度为<code>O(E*V)</code></p>

<p>不适合dense graph</p>

<h4>SPFA（都能处理，但复杂度不稳定）</h4>

<p>复杂度为<code>O(E*V)</code> in worst case，但是average running time是 <code>O(E)</code>, 可惜并没有办法证明。</p>

<p>不适合dense graph</p>

<p><a href="https://github.com/Noeyfan/noey_algos/blob/master/trivival/spfa.cc">Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[774. Minimize Max Distance to Gas Station]]></title>
    <link href="http://fyou.me/blog/2018/05/09/minimize-max-distance-to-gas-station/"/>
    <updated>2018-05-09T22:25:00-07:00</updated>
    <id>http://fyou.me/blog/2018/05/09/minimize-max-distance-to-gas-station</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimize-max-distance-to-gas-station">https://leetcode.com/problems/minimize-max-distance-to-gas-station</a></p>

<p>题意为：给定一些坐标点，表示坐标轴上已有的gas station，同时给定K，表示将要再插入K个gas station，插完以后使gas station之间的最大距离最小。</p>

<p>首先要从离散的点抽象出Interval的概念，其实已有的gas station就是一个个Interval。更为关键的是，这些interval可以视为永远不变，唯一变化的就是他们里边可能插入多少个K。基于这些interval，我们每次选择插入K的时候，只要选择插入当前所有interval中dist最大的那个，一直插入直到它比第二大小为止。插完所有的K，我们就得到了最后的解。</p>

<p>有了以上的理解，一个priority_queue就可以轻易的解决问题，用addK()去update当前interval里的value，然后把update完的top重新插回priority_queue。解法复杂度为O(klogn)</p>

<pre><code class="c++">struct Interval {
    int length, k, dist;

    Interval(int i) : length(i), k(1), dist(i) {}

    bool operator&lt; (const Interval&amp; other) const {
        return dist &lt; other.dist;
    }

    void addK() {
        k++;
        dist = length/k;
    }
};

priority_queue&lt;Interval&gt; buildQueue(const vector&lt;int&gt;&amp; v) {
    vector&lt;int&gt; ret(v.size());
    adjacent_difference(v.begin(), v.end(), ret.begin());
    ret.erase(ret.begin());
    return priority_queue&lt;Interval&gt;(ret.begin(), ret.end());
}

int minMaxDist(const vector&lt;int&gt;&amp; v, int k) {
    auto pq = buildQueue(v);
    int maxDist = (v.back() - v.front())/(k+1); // just for optimization

    while(k) {
        Interval top = pq.top();
        pq.pop();

        while(pq.top() &lt; top || top.dist &gt; maxDist) {
            top.addK();
            k--;
        }
        pq.push(top);
    }

    return pq.top().dist;
}
</code></pre>

<p>这题的难点在于正确理解题意并抽象化后找出算法，关键点在于：</p>

<ul>
<li>由于最早给定的gas station，随着K的插入，变化的并不是interval，而是每个interval内部的dist。</li>
<li>只关注最后的最大距离，并不关心每个gas station插在了哪里。</li>
</ul>

]]></content>
  </entry>
  
</feed>
